# name: Deploy to Amazon ECS

# on:
#   push:
#     branches: [ "main" ]

# env:
#   AWS_REGION: eu-north-1
#   ECS_CLUSTER: budget
#   # RabbitMQ
#   ECS_SERVICE_RABBITMQ: budget-rabbitmq
#   ECS_TASK_DEFINITION_RABBITMQ: .github/workflows/task-definitions/rabbitmq-task-definition.json
#   ECR_REPOSITORY_RABBITMQ: budget_rabbitmq
#   IMAGE_URI_RABBITMQ: ''
#   CONTAINER_NAME_RABBITMQ: budget_rabbitmq
#   # Server
#   ECS_SERVICE_SERVER: budget-server
#   ECS_TASK_DEFINITION_SERVER: .github/workflows/task-definitions/server-task-definition.json
#   ECR_REPOSITORY_SERVER: budget_server
#   IMAGE_URI_SERVER: ''
#   CONTAINER_NAME_SERVER: budget_server
#   # Client
#   ECS_SERVICE_CLIENT: budget-client
#   ECS_TASK_DEFINITION_CLIENT: .github/workflows/task-definitions/client-task-definition.json
#   ECR_REPOSITORY_CLIENT: budget_client
#   IMAGE_URI_CLIENT: ''
#   CONTAINER_NAME_CLIENT: budget_client

# permissions:
#   contents: read

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push RabbitMQ image to Amazon ECR
#       id: build-image-rabbitmq
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker pull rabbitmq:latest
#         docker tag rabbitmq:latest $ECR_REGISTRY/$ECR_REPOSITORY_RABBITMQ:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY_RABBITMQ:$IMAGE_TAG
#         echo "IMAGE_URI_RABBITMQ=$ECR_REGISTRY/$ECR_REPOSITORY_RABBITMQ:$IMAGE_TAG" >> $GITHUB_ENV
    
#     - name: Build, tag, and push Server image to Amazon ECR
#       id: build-image-server
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker-compose build server
#         docker tag docker.io/library/budget_server:latest $ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG
#         echo "IMAGE_URI_SERVER=$ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG" >> $GITHUB_ENV

#     - name: Build, tag, and push Client image to Amazon ECR
#       id: build-image-client
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker-compose build client
#         docker tag docker.io/library/budget_client:latest $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG
#         echo "IMAGE_URI_CLIENT=$ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG" >> $GITHUB_ENV

#     - name: Fill in the new image ID for RabbitMQ in the Amazon ECS task definition
#       id: task-def-rabbitmq
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION_RABBITMQ }}
#         container-name: ${{ env.CONTAINER_NAME_RABBITMQ }}
#         image: ${{ env.IMAGE_URI_RABBITMQ }}

#     - name: Fill in the new image ID for Server in the Amazon ECS task definition
#       id: task-def-server
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION_SERVER }}
#         container-name: ${{ env.CONTAINER_NAME_SERVER }}
#         image: ${{ env.IMAGE_URI_SERVER }}

#     - name: Fill in the new image ID for Client in the Amazon ECS task definition
#       id: task-def-client
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION_CLIENT }}
#         container-name: ${{ env.CONTAINER_NAME_CLIENT }}
#         image: ${{ env.IMAGE_URI_CLIENT }}

#     - name: Deploy RabbitMQ to Amazon ECS
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def-rabbitmq.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE_RABBITMQ }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true

#     - name: Deploy Server to Amazon ECS
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def-server.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE_SERVER }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true

#     - name: Deploy Client to Amazon ECS
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def-client.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE_CLIENT }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
